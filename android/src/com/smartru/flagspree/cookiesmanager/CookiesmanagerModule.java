/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.smartru.flagspree.cookiesmanager;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.FutureTask;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.kroll.common.Log;

import android.webkit.CookieManager;
import android.webkit.WebSettings;
import android.webkit.WebView;

@Kroll.module(name = "Cookiesmanager", id = "com.smartru.flagspree.cookiesmanager")
public class CookiesmanagerModule extends KrollModule {

	// Standard Debugging variables
	private static final String LCAT = "CookiesmanagerModule";

	public CookiesmanagerModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "inside onAppCreate");
	}

	// Methods
	@Kroll.method
	public void setWebViewStoreData(Object arg) {
		final Boolean store = TiConvert.toBoolean(arg);
		getActivity().runOnUiThread(new Thread() {
			public void run() {
				WebView webView = new WebView(getActivity());
				WebSettings webSettings = webView.getSettings();
				webSettings.setSaveFormData(store);
				webSettings.setSavePassword(store);
			}
		});
	}

	@Kroll.method
	public Boolean getWebViewStoreData() throws InterruptedException, ExecutionException {
		FutureTask<Boolean> task = new FutureTask<Boolean> (new Callable<Boolean>() {
			public Boolean call() {
				WebView webView = new WebView(getActivity());
				WebSettings webSettings = webView.getSettings();
				return webSettings.getSaveFormData() && webSettings.getSavePassword();				
			}
		});
		getActivity().runOnUiThread(task);
		return task.get();
	}

	@Kroll.method
	public void clearCookies(String domain) {
		CookieManager cookieManager = CookieManager.getInstance();
		String[] cookies = cookieManager.getCookie(domain).split(";");
		for (int i = 0; i < cookies.length; ++i) {
			String[] cookieParts = cookies[i].split("=");
			cookieManager.setCookie(domain, cookieParts[0].trim() + "=;");
		}
	}

	@Kroll.method
	public void clearAllCookies() {
		CookieManager cookieManager = CookieManager.getInstance();
		cookieManager.removeAllCookie();
	}
	
	@Kroll.method
	public void setAcceptCookie(Object arg) {
		CookieManager cookieManager = CookieManager.getInstance();
		Boolean accept = TiConvert.toBoolean(arg, cookieManager.acceptCookie());
		cookieManager.setAcceptCookie(accept);
	}
	
	@Kroll.method
	public Boolean acceptCookie() {
		CookieManager cookieManager = CookieManager.getInstance();
		return cookieManager.acceptCookie();
	}	
}
